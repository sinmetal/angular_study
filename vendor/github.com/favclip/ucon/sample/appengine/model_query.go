// generated by qbg -output model_query.go .; DO NOT EDIT

package example_appengine

import (
	"github.com/favclip/qbg/qbgutils"
	"google.golang.org/appengine/datastore"
)

// TodoQueryBuilder build query for Todo.
type TodoQueryBuilder struct {
	q         *datastore.Query
	plugin    qbgutils.Plugin
	ID        *TodoQueryProperty
	Text      *TodoQueryProperty
	Done      *TodoQueryProperty
	UpdatedAt *TodoQueryProperty
	CreatedAt *TodoQueryProperty
}

// TodoQueryProperty has property information for TodoQueryBuilder.
type TodoQueryProperty struct {
	bldr *TodoQueryBuilder
	name string
}

// NewTodoQueryBuilder create new TodoQueryBuilder.
func NewTodoQueryBuilder() *TodoQueryBuilder {
	return NewTodoQueryBuilderWithKind("Todo")
}

// NewTodoQueryBuilderWithKind create new TodoQueryBuilder with specific kind.
func NewTodoQueryBuilderWithKind(kind string) *TodoQueryBuilder {
	q := datastore.NewQuery(kind)
	bldr := &TodoQueryBuilder{q: q}
	bldr.ID = &TodoQueryProperty{
		bldr: bldr,
		name: "__key__",
	}
	bldr.Text = &TodoQueryProperty{
		bldr: bldr,
		name: "Text",
	}
	bldr.Done = &TodoQueryProperty{
		bldr: bldr,
		name: "Done",
	}
	bldr.UpdatedAt = &TodoQueryProperty{
		bldr: bldr,
		name: "UpdatedAt",
	}
	bldr.CreatedAt = &TodoQueryProperty{
		bldr: bldr,
		name: "CreatedAt",
	}

	if plugger, ok := interface{}(bldr).(qbgutils.Plugger); ok {
		bldr.plugin = plugger.Plugin()
		bldr.plugin.Init("Todo")
	}

	return bldr
}

// Ancestor sets parent key to ancestor query.
func (bldr *TodoQueryBuilder) Ancestor(parentKey *datastore.Key) *TodoQueryBuilder {
	bldr.q = bldr.q.Ancestor(parentKey)
	if bldr.plugin != nil {
		bldr.plugin.Ancestor(parentKey)
	}
	return bldr
}

// KeysOnly sets keys only option to query.
func (bldr *TodoQueryBuilder) KeysOnly() *TodoQueryBuilder {
	bldr.q = bldr.q.KeysOnly()
	if bldr.plugin != nil {
		bldr.plugin.KeysOnly()
	}
	return bldr
}

// Start setup to query.
func (bldr *TodoQueryBuilder) Start(cur datastore.Cursor) *TodoQueryBuilder {
	bldr.q = bldr.q.Start(cur)
	if bldr.plugin != nil {
		bldr.plugin.Start(cur)
	}
	return bldr
}

// Offset setup to query.
func (bldr *TodoQueryBuilder) Offset(offset int) *TodoQueryBuilder {
	bldr.q = bldr.q.Offset(offset)
	if bldr.plugin != nil {
		bldr.plugin.Offset(offset)
	}
	return bldr
}

// Limit setup to query.
func (bldr *TodoQueryBuilder) Limit(limit int) *TodoQueryBuilder {
	bldr.q = bldr.q.Limit(limit)
	if bldr.plugin != nil {
		bldr.plugin.Limit(limit)
	}
	return bldr
}

// Query returns *datastore.Query.
func (bldr *TodoQueryBuilder) Query() *datastore.Query {
	return bldr.q
}

// Filter with op & value.
func (p *TodoQueryProperty) Filter(op string, value interface{}) *TodoQueryBuilder {
	switch op {
	case "<=":
		p.LessThanOrEqual(value)
	case ">=":
		p.GreaterThanOrEqual(value)
	case "<":
		p.LessThan(value)
	case ">":
		p.GreaterThan(value)
	case "=":
		p.Equal(value)
	default:
		p.bldr.q = p.bldr.q.Filter(p.name+" "+op, value) // error raised by native query
	}
	if p.bldr.plugin != nil {
		p.bldr.plugin.Filter(p.name, op, value)
	}
	return p.bldr
}

// LessThanOrEqual filter with value.
func (p *TodoQueryProperty) LessThanOrEqual(value interface{}) *TodoQueryBuilder {
	p.bldr.q = p.bldr.q.Filter(p.name+" <=", value)
	if p.bldr.plugin != nil {
		p.bldr.plugin.Filter(p.name, "<=", value)
	}
	return p.bldr
}

// GreaterThanOrEqual filter with value.
func (p *TodoQueryProperty) GreaterThanOrEqual(value interface{}) *TodoQueryBuilder {
	p.bldr.q = p.bldr.q.Filter(p.name+" >=", value)
	if p.bldr.plugin != nil {
		p.bldr.plugin.Filter(p.name, ">=", value)
	}
	return p.bldr
}

// LessThan filter with value.
func (p *TodoQueryProperty) LessThan(value interface{}) *TodoQueryBuilder {
	p.bldr.q = p.bldr.q.Filter(p.name+" <", value)
	if p.bldr.plugin != nil {
		p.bldr.plugin.Filter(p.name, "<", value)
	}
	return p.bldr
}

// GreaterThan filter with value.
func (p *TodoQueryProperty) GreaterThan(value interface{}) *TodoQueryBuilder {
	p.bldr.q = p.bldr.q.Filter(p.name+" >", value)
	if p.bldr.plugin != nil {
		p.bldr.plugin.Filter(p.name, ">", value)
	}
	return p.bldr
}

// Equal filter with value.
func (p *TodoQueryProperty) Equal(value interface{}) *TodoQueryBuilder {
	p.bldr.q = p.bldr.q.Filter(p.name+" =", value)
	if p.bldr.plugin != nil {
		p.bldr.plugin.Filter(p.name, "=", value)
	}
	return p.bldr
}

// Asc order.
func (p *TodoQueryProperty) Asc() *TodoQueryBuilder {
	p.bldr.q = p.bldr.q.Order(p.name)
	if p.bldr.plugin != nil {
		p.bldr.plugin.Asc(p.name)
	}
	return p.bldr
}

// Desc order.
func (p *TodoQueryProperty) Desc() *TodoQueryBuilder {
	p.bldr.q = p.bldr.q.Order("-" + p.name)
	if p.bldr.plugin != nil {
		p.bldr.plugin.Desc(p.name)
	}
	return p.bldr
}
